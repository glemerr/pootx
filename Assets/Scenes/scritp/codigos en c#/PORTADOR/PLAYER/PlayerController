using UnityEngine;

public class PlayerController : MonoBehaviour
{
    // Movement variables
    [Header("Movement Settings")]
    [SerializeField] private float moveSpeed = 5f;
    [SerializeField] private float jumpForce = 7f;
    [SerializeField] private float gravity = -9.81f;
    [SerializeField] private float rotationSpeed = 3f;

    // Component references
    private CharacterController characterController;
    private Transform cameraTransform;
    private Vector3 velocity;
    private bool isGrounded;

    // Input variables
    private float horizontalInput;
    private float verticalInput;
    private bool jumpInput;

    void Start()
    {
        // Get component references
        characterController = GetComponent<CharacterController>();
        cameraTransform = Camera.main.transform;
        
        // Lock cursor for first-person control
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
    }

    void Update()
    {
        // Check if character is grounded
        isGrounded = characterController.isGrounded;
        
        // Reset vertical velocity when grounded
        if (isGrounded && velocity.y < 0)
        {
            velocity.y = -2f;
        }

        // Get input
        GetPlayerInput();
        
        // Handle movement
        MovePlayer();
        
        // Handle jumping
        HandleJump();
        
        // Apply gravity
        ApplyGravity();
    }

    void GetPlayerInput()
    {
        // Get axis input for movement
        horizontalInput = Input.GetAxis("Horizontal");
        verticalInput = Input.GetAxis("Vertical");
        
        // Get jump input
        jumpInput = Input.GetButtonDown("Jump");
    }

    void MovePlayer()
    {
        // Calculate movement direction relative to camera
        Vector3 forward = cameraTransform.forward;
        Vector3 right = cameraTransform.right;
        
        // Project vectors onto the horizontal plane
        forward.y = 0;
        right.y = 0;
        forward.Normalize();
        right.Normalize();

        // Create movement direction vector
        Vector3 moveDirection = forward * verticalInput + right * horizontalInput;
        
        // Normalize movement if moving diagonally
        if (moveDirection.magnitude > 1f)
        {
            moveDirection.Normalize();
        }

        // Move the character
        characterController.Move(moveDirection * moveSpeed * Time.deltaTime);
        
        // Rotate character to face movement direction
        if (moveDirection != Vector3.zero)
        {
            Quaternion targetRotation = Quaternion.LookRotation(moveDirection);
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);
        }
    }

    void HandleJump()
    {
        // Jump when grounded and jump button pressed
        if (isGrounded && jumpInput)
        {
            velocity.y = Mathf.Sqrt(jumpForce * -2f * gravity);
        }
    }

    void ApplyGravity()
    {
        // Apply gravity to vertical velocity
        velocity.y += gravity * Time.deltaTime;
        
        // Move character vertically
        characterController.Move(velocity * Time.deltaTime);
    }
}
